# Angular 20 CRUD Item Manager

## Visão Geral
Aplicação Angular 20 para gerenciamento de itens com operações CRUD completas.

## Tecnologias Utilizadas
- Angular 20 com Standalone Components
- Angular Material Design com tema purple-green + customizações purple
- RxJS e Signals para gerenciamento de estado
- JSON Server para API simulada
- TypeScript com JSDoc para documentação
- ngx-image-cropper para recorte de imagens
- Compodoc para documentação técnica
- Gradientes e estilos CSS3 personalizados

## Estrutura do Projeto
```
src/app/
├── components/          # Componentes principais da aplicação
│   ├── item-list/      # Lista de itens com filtros e paginação
│   ├── item-form/      # Formulário de criação/edição
│   ├── item-card/      # Card para exibir item
│   └── item-dialog/    # Modal para visualizar detalhes
├── services/           # Services para comunicação com API
│   ├── item.service.ts     # CRUD operations
│   └── notification.service.ts # Notificações
├── models/             # Interfaces e modelos TypeScript
│   └── item.model.ts
├── shared/             # Componentes reutilizáveis
│   └── components/
│       ├── spinner/    # Loading spinner
│       ├── modal/      # Modal genérico
│       └── confirm-dialog/ # Diálogo de confirmação
├── guards/            # Guards de rota
└── interceptors/      # Interceptors HTTP
```

## Funcionalidades Implementadas
- ✅ Listagem de itens com Material Design
- ✅ Criação de itens com validação reativa
- ✅ Edição de itens existentes
- ✅ Exclusão com confirmação via dialog
- ✅ Upload e recorte de imagens com ngx-image-cropper
- ✅ Filtros de busca por título/descrição
- ✅ Ordenação por diferentes campos
- ✅ Paginação completa
- ✅ Feedback visual com Material Snackbar
- ✅ Documentação JSDoc completa
- ✅ Tema purple-green com customizações purple (gradientes)
- ✅ Componentes genéricos reutilizáveis
- ✅ Estados de carregamento com spinners
- ✅ Tratamento de erros robusto
- ✅ Design responsivo com cards arredondados

## Melhorias Visuais v1.1.2
- ✅ **Paginator Estilizado**: Gradiente purple com navegação aprimorada
- ✅ **Cards Premium**: Gradientes sutis e bordas purple suaves
- ✅ **Micro-Interações**: Hover effects com transform e scaling
- ✅ **Consistência Visual**: Todas as cores seguem paleta purple
- ✅ **Transições Suaves**: cubic-bezier para animações naturais
- ✅ **Contraste Otimizado**: Cores testadas para acessibilidade
- ✅ **Elementos Temáticos**: Spinners, forms e notificações consistentes

## Busca Inteligente v1.1.3
- ✅ **Debounce Otimizado**: 500ms de delay para performance
- ✅ **Filtro por Caracteres**: Busca executa apenas com 3+ caracteres
- ✅ **Busca Local**: Filtro em título e descrição no cliente
- ✅ **Feedback Visual**: Hint mostra quantos caracteres faltam
- ✅ **UX Intuitiva**: Placeholder explicativo e estados claros
- ✅ **Performance**: Evita requests desnecessários ao servidor
- ✅ **Separação de Concerns**: Busca e ordenação tratadas separadamente

## IDs Únicos para Automação v1.1.5
- ✅ **Elementos Clicáveis Identificados**: Todos os botões, inputs e elementos clicáveis possuem IDs únicos
- ✅ **Padrão de Nomenclatura**: IDs seguem padrão consistente (btn-, input-, select-, etc.)
- ✅ **IDs Dinâmicos**: Para listas, IDs incluem o ID do item (ex: btn-edit-item-1)
- ✅ **Componentes Reutilizáveis**: IDs em modais, confirmações e spinners
- ✅ **Facilita Testes E2E**: Cypress, Selenium e outros podem localizar elementos facilmente
- ✅ **Acessibilidade**: Melhora navegação por teclado e tecnologias assistivas

### Lista Completa de IDs Implementados

#### ItemListComponent
- `btn-create-item` - Botão principal "Novo Item"
- `input-search` - Campo de busca
- `select-sort-by` - Select para ordenação
- `select-sort-direction` - Select para direção da ordenação
- `btn-clear-filters` - Botão limpar filtros
- `btn-clear-filters-empty` - Botão limpar filtros no estado vazio
- `btn-create-first-item` - Botão criar primeiro item
- `paginator-items` - Paginador de itens

#### ItemCardComponent (IDs dinâmicos por item)
- `btn-menu-item-{id}` - Botão menu de ações
- `btn-view-item-{id}` - Visualizar item (menu)
- `btn-edit-item-{id}` - Editar item (menu)
- `btn-delete-item-{id}` - Excluir item (menu)
- `img-container-item-{id}` - Container da imagem
- `img-item-{id}` - Imagem do item
- `btn-view-details-item-{id}` - Ver detalhes (botões inline)
- `btn-edit-inline-item-{id}` - Editar (botões inline)

#### ItemFormComponent
- `input-title` - Campo título
- `textarea-description` - Campo descrição
- `input-image-url` - Campo URL da imagem
- `input-file-upload` - Input de upload de arquivo
- `btn-select-image` - Botão selecionar imagem
- `btn-clear-image` - Botão limpar imagem
- `btn-cancel-form` - Botão cancelar formulário
- `btn-save-form` - Botão salvar formulário

#### ItemDialogComponent (IDs dinâmicos por item)
- `btn-close-dialog` - Botão fechar no header
- `img-dialog-item-{id}` - Imagem no diálogo
- `link-image-url-{id}` - Link para URL da imagem
- `btn-close-dialog-footer` - Botão fechar no footer
- `btn-view-image-{id}` - Botão ver imagem
- `btn-edit-dialog-{id}` - Botão editar no diálogo

#### Componentes Compartilhados
- `btn-confirm-cancel` - Botão cancelar (ConfirmDialog)
- `btn-confirm-action` - Botão confirmar (ConfirmDialog)
- `modal-overlay` - Overlay do modal
- `modal-container` - Container do modal
- `btn-modal-close` - Botão fechar modal

## Comandos Úteis
```bash
# Instalar dependências
npm install

# Iniciar aplicação Angular
npm start

# Iniciar JSON Server
npm run json-server

# Comando de desenvolvimento completo (Angular + JSON Server)
npm run start:dev

# Gerar documentação Compodoc
npm run doc:build
npm run doc:serve
npm run doc:buildandserve

# Gerar documentação JSDoc
npm run jsdoc

# Build produção
npm run build

# Executar testes
npm test
```

## Recursos Angular 20 Utilizados
- **Standalone Components**: Todos os componentes são independentes
- **Signals**: Para gerenciamento de estado reativo
- **Control Flow**: Uso de @if, @for nos templates
- **Material Design System**: Tema purple-green + customizações CSS
- **Reactive Forms**: Validação em tempo real
- **HTTP Client**: Comunicação com JSON Server
- **Router**: Lazy loading de componentes
- **Dependency Injection**: Injeção moderna com inject()

## Customizações de Tema
- **Tema Base**: purple-green.css (Material Design)
- **Gradientes Personalizados**: 
  - Toolbar e botões: linear-gradient(135deg, #673ab7 0%, #9c27b0 100%)
  - Cards: linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)
  - Paginator: gradiente purple com texto branco
  - Background: gradiente sutil no body
- **Bordas Arredondadas**: Cards e elementos com border-radius 12px
- **Sombras Temáticas**: Box-shadows com cores purple rgba(103, 58, 183, 0.08)
- **Hover Effects**: Transform translateY(-2px) e sombras expandidas
- **Form Fields**: Estados de foco com cores purple
- **Snackbars**: Gradientes específicos por tipo de notificação
- **Spinners**: Loading indicators com stroke purple

## API Endpoints (JSON Server)
```
GET    /items          # Listar todos os itens
GET    /items/:id      # Buscar item por ID
POST   /items          # Criar novo item
PUT    /items/:id      # Atualizar item
DELETE /items/:id      # Excluir item

# Filtros suportados:
GET /items?q=search&_sort=field&_order=asc/desc&_page=1&_limit=10
```

## Estrutura de Dados
```typescript
interface Item {
  id: number;
  title: string;
  description: string;
  imageUrl: string;
  createdAt?: Date;
  updatedAt?: Date;
}
```

## Serviço de Imagens
- **Placeholder Service**: https://placehold.co/
- **Formato Básico**: `https://placehold.co/WIDTHxHEIGHT?text=TEXTO`
- **Formato Colorido**: `https://placehold.co/WIDTHxHEIGHT/COR_FUNDO/COR_TEXTO?text=TEXTO`
- **URLs de exemplo**: 
  - Simples: https://placehold.co/300x200?text=Item+1
  - Colorido: https://placehold.co/300x200/4A90E2/FFFFFF?text=Smartphone
- **Fallback para erros**: https://placehold.co/400x300?text=Imagem+não+encontrada
- **Formatos suportados**: JPG, PNG, GIF, WebP
- **Cores**: Hexadecimal sem # (ex: 4A90E2 para azul)
- **Aspect Ratio recomendado**: 4:3 para cards, 3:2 para detalhes

## Componentes Genéricos Criados
1. **SpinnerComponent**: Loading indicator customizável
2. **ModalComponent**: Modal genérico com slots
3. **ConfirmDialogComponent**: Diálogo de confirmação

## Validações Implementadas
- Título: obrigatório, mínimo 3 caracteres
- Descrição: obrigatória, mínimo 10 caracteres
- URL da Imagem: obrigatória, formato URL válido
- Recorte de imagem: aspect ratio 4:3, dimensões mínimas

## Estados de Carregamento
- Loading global durante operações
- Loading por item durante exclusão
- Spinners customizados com mensagens
- Desabilitar ações durante loading

## Tratamento de Erros
- Interceptação de erros HTTP
- Notificações visuais para usuário
- Fallback para imagens quebradas
- Estados de erro com possibilidade de retry

## Responsividade
- Grid adaptativo para cards
- Formulários responsivos
- Menu mobile-friendly
- Imagens otimizadas para diferentes telas

## Documentação
- JSDoc completo em todos os arquivos
- Exemplos de uso nos comentários
- Documentação técnica com Compodoc
- README detalhado com instruções

## Testes
- Estrutura preparada para testes unitários
- Componentes testáveis com dependency injection
- Mocks para services

## Performance
- Lazy loading de componentes
- OnPush change detection strategy onde aplicável
- Debounce em filtros de busca
- Paginação para grandes datasets

## Acessibilidade
- Labels adequados para formulários
- ARIA attributes nos componentes
- Navegação por teclado
- Alto contraste no tema

## Dados de Exemplo

O arquivo `db.json` contém dados de exemplo atualizados:

```json
{
  "items": [
    {
      "id": 1,
      "title": "Smartphone Premium",
      "description": "Smartphone de última geração com câmera profissional, tela AMOLED de 6.7 polegadas e bateria de longa duração. Perfeito para fotografia e produtividade.",
      "imageUrl": "https://placehold.co/300x200/4A90E2/FFFFFF?text=Smartphone",
      "createdAt": "2024-01-15T10:30:00.000Z",
      "updatedAt": "2024-01-15T10:30:00.000Z"
    },
    {
      "id": 2,
      "title": "Notebook Gamer",
      "description": "Notebook para jogos com placa de vídeo dedicada, processador Intel i7, 16GB RAM e SSD 512GB. Ideal para games e trabalho pesado.",
      "imageUrl": "https://placehold.co/300x200/50C878/FFFFFF?text=Notebook",
      "createdAt": "2024-01-16T14:20:00.000Z",
      "updatedAt": "2024-01-16T14:20:00.000Z"
    },
    {
      "id": 3,
      "title": "Fones Bluetooth",
      "description": "Fones de ouvido sem fio com cancelamento de ruído ativo, até 30 horas de bateria e qualidade de som premium para música e chamadas.",
      "imageUrl": "https://placehold.co/300x200/9B59B6/FFFFFF?text=Fones",
      "createdAt": "2024-01-17T09:15:00.000Z",
      "updatedAt": "2024-01-17T09:15:00.000Z"
    }
  ]
}
```

## Próximos Passos
- Implementar autenticação
- Adicionar mais filtros avançados
- Cache inteligente de dados
- PWA capabilities
- Testes E2E com Cypress
